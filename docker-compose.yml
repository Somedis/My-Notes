version: '3.9'

services:
  nginx:
    container_name: nginx
    restart: always
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    volumes:
      - ~/volumes/static_volume:/code/static
    ports:
      - 80:80
    depends_on:
      - backend
    networks:
      - note_app

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    command: bash -c "python manage.py collectstatic --noinput && \
      python manage.py migrate --noinput && \
      gunicorn config.wsgi:application --log-level debug --timeout 120 --bind 0.0.0.0:8000 --reload"
    env_file:
      - ./.env
    volumes:
      - ~/volumes/static_volume:/code/static
    depends_on:
      db:
        condition: service_healthy
    networks:
      - note_app

  frontend:
    container_name: frontend
    image: express
    ports:
      - 5000:5000
    command: npm start
    env_file:
      - ./.env
    environment:
      - API_URL=http://nginx
    volumes:
      - ~/volumes/frontend_volume:/app/project
    depends_on:
      - backend
    networks:
      - note_app

  db:
    container_name: postgres_db
    image: postgres:15
    restart: always
    volumes:
      - ~/volumes/postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
    networks:
      - note_app

volumes:
  postgres_data:
  static_volume:
  frontend_volume:

networks:
  note_app:
    driver: bridge
